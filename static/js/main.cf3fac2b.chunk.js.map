{"version":3,"sources":["counters/slice/counters.selectors.ts","counters/slice/stopCounters.thunks.ts","counters/slice/startCounters.thunks.ts","counters/slice/counters.slice.ts","store/store.ts","store/store.hooks.ts","counters/slice/startChurn.thunks.ts","counters/components/CounterControl.tsx","counters/components/CounterTable.tsx","counters/components/DefaultCounter.tsx","counters/components/TestHeader.tsx","simple-selector/SimpleSelectorTest.tsx","computed/ComputedSelectorTest.tsx","reselect/ReselectSelectorTest.tsx","counters/components/SelectorCounter.tsx","curried/CurriedSelectorTest.tsx","curried-reselect/CurriedReselectTest.tsx","reverse-curried-reselect/ReverseCurriedReselectTest.tsx","sudo-reselect/SudoReselectTest.tsx","custom-reselect/CustomReselectTest.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getAllCounters","state","counters","getCurrentInterval","intervalId","stopCounters","createAsyncThunk","_","a","dispatch","getState","window","clearInterval","startCounters","setInterval","counterKeys","filter","c","Math","random","map","key","incrementCounters","condition","counterSlice","createSlice","name","initialState","reducers","addCounter","action","i","payload","push","nanoid","counter","group","includes","forEach","removeCounters","clearCounters","extraReducers","builder","addCase","fulfilled","undefined","counterReducer","reducer","actions","store","configureStore","useAppSelector","useSelector","churnCounters","incrKeys","length","addAmount","floor","remKeys","CounterControl","useDispatch","start","useCallback","startChurn","add","amount","stop","clear","onClick","CounterTable","children","DefaultCounter","TestHeader","title","selectorCode","className","SimpleSelectorTest","simpleSelector","String","raw","ComputedSelectorTest","countersA","groupASelector","countersB","groupBSelector","ReselectSelectorTest","createSelector","selectors","SelectorCounter","counterKey","selector","CurriedSelectorTest","makeGroupSelector","makeCounterSelector","find","CurriedReselectTest","Counter","ReverseCurriedReselectTest","groupSelector","counterSelector","memoize","SudoReselectTest","g","k","CustomReselectTest","customSelectorCreator","createSelectorCreator","args","reduce","acc","val","JSON","stringify","Home","href","App","basename","to","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf3fac2b.chunk.js","sourcesContent":["import { RootState } from '../../store/store'\n\nexport const getAllCounters = (state: RootState) => (state.counters.counters)\n\nexport const getCurrentInterval = (state: RootState) => (state.counters.intervalId)\n","import { AppThunkConfig } from '../../store/store'\nimport { createAsyncThunk } from '@reduxjs/toolkit'\nimport { getCurrentInterval } from './counters.selectors'\n\n// eslint-disable-next-line @typescript-eslint/no-invalid-void-type\nexport const stopCounters = createAsyncThunk<void, undefined, AppThunkConfig>(\n  'counters/stop',\n  async (_, { dispatch, getState }) => {\n    const intervalId = getCurrentInterval(getState())\n\n    window.clearInterval(intervalId)\n  }\n)\n","import { AppThunkConfig } from '../../store/store'\nimport { incrementCounters } from './counters.slice'\nimport { createAsyncThunk } from '@reduxjs/toolkit'\nimport { getAllCounters, getCurrentInterval } from './counters.selectors'\n\nexport const startCounters = createAsyncThunk<number, undefined, AppThunkConfig>(\n  'counters/start',\n  async (_, { dispatch, getState }) => {\n    return window.setInterval(() => {\n      const counterKeys = getAllCounters(getState()).filter(c => Math.random() < 0.01).map(c => c.key)\n      dispatch(incrementCounters(counterKeys))\n    }, 5)\n  },\n  {\n    condition: (_, { getState }) => {\n      return getCurrentInterval(getState()) == null\n    }\n  }\n)\n","import { stopCounters } from './stopCounters.thunks'\nimport { createSlice, PayloadAction, nanoid } from '@reduxjs/toolkit'\nimport { startCounters } from './startCounters.thunks'\n\nexport interface Counter {\n  key: string\n  counter: number\n  group: string\n}\n\nexport interface CounterState {\n  counters: Counter[]\n  intervalId?: number\n}\n\nconst initialState: CounterState = {\n  counters: []\n}\n\nconst counterSlice = createSlice({\n  name: 'counters',\n  initialState: initialState,\n  reducers: {\n    addCounter: (state, action: PayloadAction<number>) => {\n      for (let i = 0; i < action.payload; i++) {\n        state.counters.push({\n          key: nanoid(),\n          counter: 0,\n          group: Math.random() >= 0.5 ? 'a' : 'b'\n        })\n      }\n      return state\n    },\n    incrementCounters: (state, action: PayloadAction<string[]>) => {\n      state.counters\n        .filter(c => action.payload.includes(c.key))\n        .forEach(c => c.counter++)\n      return state\n    },\n    removeCounters: (state, action: PayloadAction<string[]>) => {\n      state.counters = state.counters.filter(c => !action.payload.includes(c.key))\n      return state\n    },\n    clearCounters: (state) => {\n      state.counters = []\n      return state\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(startCounters.fulfilled, (state, action) => {\n      state.intervalId = action.payload\n      return state\n    })\n\n    builder.addCase(stopCounters.fulfilled, (state) => {\n      state.intervalId = undefined\n      return state\n    })\n  }\n})\n\nexport const counterReducer = counterSlice.reducer\n\nexport const { incrementCounters, addCounter, removeCounters, clearCounters } = counterSlice.actions\n","import { counterReducer } from '../counters/slice/counters.slice'\nimport { configureStore } from '@reduxjs/toolkit'\n\nexport const store = configureStore({\n  reducer: {\n    counters: counterReducer\n  }\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\nexport interface AppThunkConfig {\n  state: RootState\n  dispatch: AppDispatch\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { AppThunkConfig } from '../../store/store'\nimport { addCounter, incrementCounters, removeCounters } from './counters.slice'\nimport { createAsyncThunk } from '@reduxjs/toolkit'\nimport { getAllCounters, getCurrentInterval } from './counters.selectors'\n\nexport const churnCounters = createAsyncThunk<number, undefined, AppThunkConfig>(\n  'counters/churn',\n  async (_, { dispatch, getState }) => {\n    return window.setInterval(() => {\n      //      window.requestAnimationFrame(() => {\n      const counters = getAllCounters(getState()) ?? []\n      // increment some counters\n      const incrKeys = counters.filter(c => Math.random() < 0.01).map(c => c.key)\n      dispatch(incrementCounters(incrKeys))\n\n      if (counters.length === 0 || Math.random() < 0.005) {\n        // add some\n        const addAmount = Math.floor(Math.random() * 10)\n        dispatch(addCounter(addAmount))\n      }\n\n      // remove some\n      if (Math.random() < 0.005) {\n        const remKeys = counters.filter(c => !incrKeys.includes(c.key) && Math.random() < 0.1).map(c => c.key)\n        dispatch(removeCounters(remKeys))\n      }\n      //      })\n    }, 5)\n  },\n  {\n    condition: (_, { getState }) => {\n      return getCurrentInterval(getState()) == null\n    }\n  }\n)\n","import { FC, useCallback } from 'react'\nimport { useAppDispatch } from '../../store/store.hooks'\nimport { addCounter, clearCounters } from '../slice/counters.slice'\nimport { churnCounters } from '../slice/startChurn.thunks'\nimport { startCounters } from '../slice/startCounters.thunks'\nimport { stopCounters } from '../slice/stopCounters.thunks'\n\nexport const CounterControl: FC = () => {\n  const dispatch = useAppDispatch()\n\n  const start = useCallback(async () => {\n    await dispatch(startCounters())\n  }, [dispatch])\n\n  const startChurn = useCallback(async () => {\n    await dispatch(churnCounters())\n  }, [dispatch])\n\n  const add = useCallback(async (amount: number) => {\n    await dispatch(addCounter(amount))\n  }, [dispatch])\n\n  const stop = useCallback(async () => {\n    await dispatch(stopCounters())\n  }, [dispatch])\n\n  const clear = useCallback(async () => {\n    await dispatch(clearCounters())\n  }, [dispatch])\n\n  return (\n    <div>\n      <button onClick={() => void add(1)}>Add Counter</button>\n      <button onClick={() => void add(10)}>Add 10 Counters</button>\n      <button onClick={() => void add(100)}>Add 100 Counters</button>\n      <button onClick={start}>Start</button>\n      <button onClick={startChurn}>Start Churn</button>\n      <button onClick={stop}>Stop</button>\n      <button onClick={clear}>Clear</button>\n    </div>\n  )\n}\n","import { FC } from 'react'\nimport { Counter } from '../slice/counters.slice'\n\nexport interface CounterTableProps {\n  counters?: Counter[]\n}\n\nexport const CounterTable: FC = ({ children }) => {\n  return (\n    <table>\n    <thead>\n      <tr>\n        <th>Key</th>\n        <th>Counter</th>\n        <th>Group</th>\n      </tr>\n    </thead>\n    <tbody>\n      { children}\n    </tbody>\n  </table>\n  )\n}\n","import { FC } from 'react'\nimport { Counter } from '../slice/counters.slice'\n\nexport interface DefaultCounterProps {\n  counter: Counter\n}\n\nexport const DefaultCounter: FC<DefaultCounterProps> = ({ counter }) => {\n  return (\n    <tr>\n      <td>{counter.key}</td>\n      <td>{counter.counter}</td>\n      <td>{counter.group}</td>\n    </tr>\n  )\n}\n","import { FC } from 'react'\n\nexport interface TestHeaderProps {\n  title: string\n  selectorCode: string\n}\n\nexport const TestHeader: FC<TestHeaderProps> = ({ title, selectorCode }) => {\n  return (\n    <>\n      <div className='title'>{title}</div>\n      <div>\n        <pre>{selectorCode}</pre>\n      </div>\n    </>\n  )\n}\n","import { FC } from 'react'\nimport { CounterControl } from '../counters/components/CounterControl'\nimport { CounterTable } from '../counters/components/CounterTable'\nimport { DefaultCounter } from '../counters/components/DefaultCounter'\nimport { TestHeader } from '../counters/components/TestHeader'\nimport { RootState } from '../store/store'\nimport { useAppSelector } from '../store/store.hooks'\n\nexport const SimpleSelectorTest: FC = () => {\n  const counters = useAppSelector(simpleSelector)\n  return (\n    <div>\n      <TestHeader title='Simple Selector Test' selectorCode={String.raw`const simpleSelector = (state: RootState) => {\n  return state.counters.counters\n}`}/>\n      <CounterControl />\n      <div className='container'>\n        <div className='column'>\n          <CounterTable>\n            { counters?.filter(c => c.group === 'a').map(c => (<DefaultCounter key={c.key} counter={c} />)) }\n          </CounterTable>\n        </div>\n        <div className='column'>\n          <CounterTable>\n            { counters?.filter(c => c.group === 'b').map(c => (<DefaultCounter key={c.key} counter={c} />)) }\n          </CounterTable>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst simpleSelector = (state: RootState) => {\n  return state.counters.counters\n}\n","import { FC } from 'react'\nimport { CounterControl } from '../counters/components/CounterControl'\nimport { CounterTable } from '../counters/components/CounterTable'\nimport { DefaultCounter } from '../counters/components/DefaultCounter'\nimport { TestHeader } from '../counters/components/TestHeader'\nimport { RootState } from '../store/store'\nimport { useAppSelector } from '../store/store.hooks'\n\nexport const ComputedSelectorTest: FC = () => {\n  const countersA = useAppSelector(groupASelector)\n  const countersB = useAppSelector(groupBSelector)\n\n  return (\n    <div>\n      <TestHeader title='Computed Selector Test' selectorCode={String.raw`const groupASelector = (state: RootState) => {\n  return state.counters.counters.filter(c => c.group === 'a')\n}\n\nconst groupBSelector = (state: RootState) => {\n  return state.counters.counters.filter(c => c.group === 'b')\n}`}/>\n      <CounterControl />\n      <div className='container'>\n        <div className='column'>\n          <CounterTable>\n            { countersA?.map(c => (<DefaultCounter key={c.key} counter={c} />)) }\n          </CounterTable>\n        </div>\n        <div className='column'>\n          <CounterTable>\n            { countersB?.map(c => (<DefaultCounter key={c.key} counter={c} />)) }\n          </CounterTable>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst groupASelector = (state: RootState) => {\n  return state.counters.counters.filter(c => c.group === 'a')\n}\n\nconst groupBSelector = (state: RootState) => {\n  return state.counters.counters.filter(c => c.group === 'b')\n}\n","import { FC } from 'react'\nimport { createSelector } from '@reduxjs/toolkit'\nimport { useAppSelector } from '../store/store.hooks'\nimport { getAllCounters } from '../counters/slice/counters.selectors'\nimport { TestHeader } from '../counters/components/TestHeader'\nimport { CounterControl } from '../counters/components/CounterControl'\nimport { CounterTable } from '../counters/components/CounterTable'\nimport { DefaultCounter } from '../counters/components/DefaultCounter'\n\nexport const ReselectSelectorTest: FC = () => {\n  const countersA = useAppSelector(groupASelector)\n  const countersB = useAppSelector(groupBSelector)\n\n  return (\n    <div>\n      <TestHeader title='Reselect Selector Test' selectorCode={String.raw`const groupASelector = createSelector(\n  getAllCounters,\n  (selectors) => (selectors.filter(c => c.group === 'a'))\n)\n\nconst groupBSelector = createSelector(\n  getAllCounters,\n  (selectors) => (selectors.filter(c => c.group === 'b'))\n)`}/>\n      <CounterControl />\n      <div className='container'>\n        <div className='column'>\n          <CounterTable>\n            { countersA?.map(c => (<DefaultCounter key={c.key} counter={c} />)) }\n          </CounterTable>\n        </div>\n        <div className='column'>\n          <CounterTable>\n            { countersB?.map(c => (<DefaultCounter key={c.key} counter={c} />)) }\n          </CounterTable>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst groupASelector = createSelector(\n  getAllCounters,\n  (selectors) => (selectors.filter(c => c.group === 'a'))\n)\n\nconst groupBSelector = createSelector(\n  getAllCounters,\n  (selectors) => (selectors.filter(c => c.group === 'b'))\n)\n","import { FC } from 'react'\nimport { useAppSelector } from '../../store/store.hooks'\nimport { Counter, CounterState } from '../slice/counters.slice'\n\ntype SimpleSelector = (key: string) => (state: { counters: CounterState }) => Counter | undefined\n\nexport interface SelectorCounterProps {\n  counterKey: string\n  selector: SimpleSelector\n}\n\nexport const SelectorCounter: FC<SelectorCounterProps> = ({ counterKey, selector }) => {\n  const counter = useAppSelector(selector(counterKey))\n\n  return (\n    <tr>\n      <td>{counter?.key}</td>\n      <td>{counter?.counter}</td>\n      <td>{counter?.group}</td>\n    </tr>\n  )\n}\n","import { FC } from 'react'\nimport { CounterControl } from '../counters/components/CounterControl'\nimport { CounterTable } from '../counters/components/CounterTable'\nimport { SelectorCounter } from '../counters/components/SelectorCounter'\nimport { TestHeader } from '../counters/components/TestHeader'\nimport { RootState } from '../store/store'\nimport { useAppSelector } from '../store/store.hooks'\n\nexport const CurriedSelectorTest: FC = () => {\n  const groupASelector = makeGroupSelector('a')\n  const groupBSelector = makeGroupSelector('b')\n  const countersA = useAppSelector(groupASelector)\n  const countersB = useAppSelector(groupBSelector)\n\n  return (\n    <div>\n      <TestHeader title='Curried Selector Test' selectorCode={String.raw`const makeGroupSelector = (group: string) => (state: RootState) => {\n  return state.counters.counters.filter(c => c.group === group)\n}`}/>\n      <CounterControl />\n\n      <div className='container'>\n        <div className='column'>\n          <CounterTable >\n            { countersA?.map(c => (<SelectorCounter key={c.key} counterKey={c.key} selector={makeCounterSelector} />))}\n          </CounterTable>\n        </div>\n        <div className='column'>\n          <CounterTable>\n            { countersB?.map(c => (<SelectorCounter key={c.key} counterKey={c.key} selector={makeCounterSelector} />)) }\n          </CounterTable>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst makeGroupSelector = (group: string) => (state: RootState) => {\n  return state.counters.counters.filter(c => c.group === group)\n}\n\nconst makeCounterSelector = (key: string) => (state: RootState) => {\n  return state.counters.counters.find(c => c.key === key)\n}\n","import { createSelector } from '@reduxjs/toolkit'\nimport { FC } from 'react'\nimport { CounterControl } from '../counters/components/CounterControl'\nimport { CounterTable } from '../counters/components/CounterTable'\nimport { TestHeader } from '../counters/components/TestHeader'\nimport { getAllCounters } from '../counters/slice/counters.selectors'\nimport { useAppSelector } from '../store/store.hooks'\n\nexport const CurriedReselectTest: FC = () => {\n  const groupASelector = makeGroupSelector('a')\n  const groupBSelector = makeGroupSelector('b')\n  const countersA = useAppSelector(groupASelector)\n  const countersB = useAppSelector(groupBSelector)\n\n  return (\n    <div>\n      <TestHeader title='Curried Selector Test' selectorCode={String.raw`const makeGroupSelector = (group: string) => {\n  return createSelector(\n    getAllCounters,\n    (selectors) => (selectors.filter(c => c.group === group))\n  )\n}\n\nconst makeCounterSelector = (key: string) => {\n  return createSelector(\n    getAllCounters,\n    (selectors) => (selectors.find(c => c.key === key))\n  )\n}`}/>\n      <CounterControl />\n      <div className='container'>\n        <div className='column'>\n          <CounterTable >\n            { countersA?.map(c => (<Counter key={c.key} counterKey={c.key} />))}\n          </CounterTable>\n          </div>\n            <div className='column'>\n          <CounterTable>\n            { countersB?.map(c => (<Counter key={c.key} counterKey={c.key} />)) }\n          </CounterTable>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst Counter: FC<{ counterKey: string }> = ({ counterKey }) => {\n  const counter = useAppSelector(makeCounterSelector(counterKey))\n\n  return (\n    <tr>\n      <td>{counter?.key}</td>\n      <td>{counter?.counter}</td>\n      <td>{counter?.group}</td>\n    </tr>\n  )\n}\n\nconst makeGroupSelector = (group: string) => {\n  return createSelector(\n    getAllCounters,\n    (selectors) => (selectors.filter(c => c.group === group))\n  )\n}\n\nconst makeCounterSelector = (key: string) => {\n  return createSelector(\n    getAllCounters,\n    (selectors) => (selectors.find(c => c.key === key))\n  )\n}\n","import { createSelector } from '@reduxjs/toolkit'\nimport memoize from 'lodash/memoize'\nimport { FC } from 'react'\nimport { CounterControl } from '../counters/components/CounterControl'\nimport { CounterTable } from '../counters/components/CounterTable'\nimport { TestHeader } from '../counters/components/TestHeader'\nimport { getAllCounters } from '../counters/slice/counters.selectors'\nimport { useAppSelector } from '../store/store.hooks'\n\nexport const ReverseCurriedReselectTest: FC = () => {\n  const countersA = useAppSelector(groupSelector)('a')\n  const countersB = useAppSelector(groupSelector)('b')\n\n  return (\n    <div>\n      <TestHeader title='Reversed Curried Selector Test' selectorCode={String.raw`const makeGroupSelector = (group: string) => {\n  return createSelector(\n    getAllCounters,\n    (selectors) => (selectors.filter(c => c.group === group))\n  )\n}\n\nconst makeCounterSelector = (key: string) => {\n  return createSelector(\n    getAllCounters,\n    (selectors) => (selectors.find(c => c.key === key))\n  )\n}`}/>\n      <CounterControl />\n      <div className='container'>\n        <div className='column'>\n          <CounterTable >\n            { countersA?.map(c => (<Counter key={c.key} counterKey={c.key} />))}\n          </CounterTable>\n        </div>\n        <div className='column'>\n          <CounterTable>\n            { countersB?.map(c => (<Counter key={c.key} counterKey={c.key} />)) }\n          </CounterTable>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst Counter: FC<{ counterKey: string }> = ({ counterKey }) => {\n  const counter = useAppSelector(counterSelector)(counterKey)\n\n  return (\n    <tr>\n      <td>{counter?.key}</td>\n      <td>{counter?.counter}</td>\n      <td>{counter?.group}</td>\n    </tr>\n  )\n}\n\nconst groupSelector = createSelector(\n  getAllCounters,\n  (selectors) => memoize((group: string) => (selectors.filter(c => c.group === group)))\n)\n\nconst counterSelector = createSelector(\n  getAllCounters,\n  (selectors) => memoize((key: string) => (selectors.find(c => c.key === key)), (key: string) => (key))\n)\n","import { createSelector } from '@reduxjs/toolkit'\nimport { FC } from 'react'\nimport { CounterControl } from '../counters/components/CounterControl'\nimport { CounterTable } from '../counters/components/CounterTable'\nimport { TestHeader } from '../counters/components/TestHeader'\nimport { getAllCounters } from '../counters/slice/counters.selectors'\nimport { useAppSelector } from '../store/store.hooks'\n\nexport const SudoReselectTest: FC = () => {\n  const groupASelector = makeGroupSelector('a')\n  const groupBSelector = makeGroupSelector('b')\n  const countersA = useAppSelector(groupASelector)\n  const countersB = useAppSelector(groupBSelector)\n\n  return (\n    <div>\n      <TestHeader title='Sudo state Reselect Test' selectorCode={String.raw`const makeGroupSelector = (group: string) => {\n  return createSelector(\n    state => (group),\n    getAllCounters,\n    (g, selectors) => (selectors.filter(c => c.group === g))\n  )\n}\n\nconst makeCounterSelector = (key: string) => {\n  return createSelector(\n    state => (key),\n    getAllCounters,\n    (k, selectors) => (selectors.find(c => c.key === k))\n  )\n}\n`}/>\n      <CounterControl />\n      <div className='container'>\n        <div className='column'>\n          <CounterTable >\n            { countersA?.map(c => (<Counter key={c.key} counterKey={c.key} />))}\n          </CounterTable>\n          </div>\n            <div className='column'>\n          <CounterTable>\n            { countersB?.map(c => (<Counter key={c.key} counterKey={c.key} />)) }\n          </CounterTable>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst Counter: FC<{ counterKey: string }> = ({ counterKey }) => {\n  const counter = useAppSelector(makeCounterSelector(counterKey))\n\n  return (\n    <tr>\n      <td>{counter?.key}</td>\n      <td>{counter?.counter}</td>\n      <td>{counter?.group}</td>\n    </tr>\n  )\n}\n\nconst makeGroupSelector = (group: string) => {\n  return createSelector(\n    state => (group),\n    getAllCounters,\n    (g, selectors) => (selectors.filter(c => c.group === g))\n  )\n}\n\nconst makeCounterSelector = (key: string) => {\n  return createSelector(\n    state => (key),\n    getAllCounters,\n    (k, selectors) => (selectors.find(c => c.key === k))\n  )\n}\n","import { FC } from 'react'\nimport { useAppSelector } from '../store/store.hooks'\nimport { getAllCounters } from '../counters/slice/counters.selectors'\nimport { TestHeader } from '../counters/components/TestHeader'\nimport { CounterControl } from '../counters/components/CounterControl'\nimport { CounterTable } from '../counters/components/CounterTable'\nimport memoize from 'lodash/memoize'\nimport { createSelectorCreator } from 'reselect'\n\nexport const CustomReselectTest: FC = () => {\n  const groupASelector = makeGroupSelector('a')\n  const groupBSelector = makeGroupSelector('b')\n  const countersA = useAppSelector(groupASelector)\n  const countersB = useAppSelector(groupBSelector)\n\n  return (\n    <div>\n      <TestHeader title='Custom Reselect Test' selectorCode={String.raw`\nconst customSelectorCreator = createSelectorCreator(memoize as any, hashFn)\n\nconst makeGroupSelector = (group: string) => {\n  return customSelectorCreator(\n    getAllCounters,\n    (selectors) => (selectors.filter(c => c.group === group))\n  )\n}\n\nconst makeCounterSelector = (key: string) => {\n  return customSelectorCreator(\n    getAllCounters,\n    (selectors) => (selectors.find(c => c.key === key))\n  )\n}\n`}/>\n      <CounterControl />\n      <div className='container'>\n        <div className='column'>\n          <CounterTable>\n            { countersA?.map(c => (<Counter key={c.key} counterKey={c.key} />))}\n          </CounterTable>\n        </div>\n        <div className='column'>\n          <CounterTable>\n            { countersB?.map(c => (<Counter key={c.key} counterKey={c.key} />)) }\n          </CounterTable>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst Counter: FC<{ counterKey: string }> = ({ counterKey }) => {\n  const counter = useAppSelector(makeCounterSelector(counterKey))\n\n  return (\n    <tr>\n      <td>{counter?.key}</td>\n      <td>{counter?.counter}</td>\n      <td>{counter?.group}</td>\n    </tr>\n  )\n}\n\nconst hashFn = (...args: unknown[]) => args.reduce(\n  (acc, val) => `${acc as string}-${JSON.stringify(val)}`,\n  ''\n)\n\nconst customSelectorCreator = createSelectorCreator(memoize as any, hashFn)\n\nconst makeGroupSelector = (group: string) => {\n  return customSelectorCreator(\n    getAllCounters,\n    (selectors) => (selectors.filter(c => c.group === group))\n  )\n}\n\nconst makeCounterSelector = (key: string) => {\n  return customSelectorCreator(\n    getAllCounters,\n    (selectors) => (selectors.find(c => c.key === key))\n  )\n}\n","export const Home = () => {\n  return (\n    <div className='page'>\n      <h2>Redux Selector Test Bench</h2>\n      <p>\n        This is a test site to try and determine the behaviour of selectors and curried selectors in javascript memory and performance.\n        Each button across the top is a different style of implementing a selector. These are NOT good examples to copy as the point is to understand the behaviour rather than be correct.\n      </p>\n      <p>\n        The source code can be found at <a href=\"https://github.com/blacktau/selector-tests\">https://github.com/blacktau/selector-tests</a>\n      </p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport './App.css'\nimport { BrowserRouter, NavLink, Route, Switch } from 'react-router-dom'\nimport { store } from './store/store'\nimport { SimpleSelectorTest } from './simple-selector/SimpleSelectorTest'\nimport { ComputedSelectorTest } from './computed/ComputedSelectorTest'\nimport { ReselectSelectorTest } from './reselect/ReselectSelectorTest'\nimport { CurriedSelectorTest } from './curried/CurriedSelectorTest'\nimport { CurriedReselectTest } from './curried-reselect/CurriedReselectTest'\nimport { ReverseCurriedReselectTest } from './reverse-curried-reselect/ReverseCurriedReselectTest'\nimport { SudoReselectTest } from './sudo-reselect/SudoReselectTest'\nimport { CustomReselectTest } from './custom-reselect/CustomReselectTest'\nimport { Home } from './Home'\n\nfunction App () {\n  return (\n    <Provider store={store}>\n      <BrowserRouter basename='selector-tests'>\n        <header>\n          <div className='logo'>Redux Selector Test Bench</div>\n          <nav>\n            <ol>\n              <li><NavLink to='/simple'>Simple</NavLink></li>\n              <li><NavLink to='/computed'>Computed</NavLink></li>\n              <li><NavLink to='/reselect'>Reselect</NavLink></li>\n              <li><NavLink to='/curried'>Curried</NavLink></li>\n              <li><NavLink to='/curried-reselect'>Curried Reselect</NavLink></li>\n              <li><NavLink to='/reverse-curried-reselect'>Reverse Curried Reselect</NavLink></li>\n              <li><NavLink to='/custom-reselect'>Custom Reselect</NavLink></li>\n            </ol>\n          </nav>\n        </header>\n        <Switch>\n          <Route exact path='/'><Home /></Route>\n          <Route exact path='/simple'><SimpleSelectorTest /></Route>\n          <Route exact path='/computed'><ComputedSelectorTest /></Route>\n          <Route exact path='/reselect'><ReselectSelectorTest /></Route>\n          <Route exact path='/curried'><CurriedSelectorTest /></Route>\n          <Route exact path='/curried-reselect'><CurriedReselectTest /></Route>\n          <Route exact path='/reverse-curried-reselect'><ReverseCurriedReselectTest /></Route>\n          <Route exact path='/sudo-reselect'><SudoReselectTest /></Route>\n          <Route exact path='/custom-reselect'><CustomReselectTest /></Route>\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if ((onPerfEntry != null) && onPerfEntry instanceof Function) {\n    void import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}